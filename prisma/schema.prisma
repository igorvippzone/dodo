datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id String @id @default(uuid())

  fullName          String            @map("full_name")
  email             String            @unique
  password          String
  role              UserRole          @default(USER)
  cart              Cart?
  orders            Order[]
  verificationCodes VerificationCode?

  provider   String?
  providerId String? @map("provider_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Category {
  id String @id @default(uuid())

  name     String    @unique
  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id String @id @default(uuid())

  name        String
  imageUrl    String        @map("image_url")
  ingredients Ingredient[]
  items       ProductItem[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String        @map("category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model Ingredient {
  id String @id @default(uuid())

  name     String
  price    Int
  imageUrl String @map("image_url")

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ingredients")
}

model ProductItem {
  id String @id @default(uuid())

  price     Int
  size      Int?
  pizzaType Int? @map("pizza_type")

  product   Product    @relation(fields: [productId], references: [id])
  productId String     @map("product_id")
  cartItems CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_items")
}

model Cart {
  id String @id @default(uuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @map("user_id")

  token String

  totalAmount Int @default(0) @map("total_amount")

  items CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart")
}

model CartItem {
  id String @id @default(uuid())

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId String      @map("product_item_id")

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String @map("cart_id")

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart_item")
}

model Order {
  id String @id @default(uuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  token String

  totalAmount Int         @map("total_amount")
  status      OrderStatus
  paymentId   String?     @map("payment_id")
  items       Json
  fullName    String      @map("full_name")
  address     String
  email       String
  phone       String
  comment     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
}

model VerificationCode {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  code String

  createdAt DateTime @default(now()) @map("created_at")

  @@map("verification_code")
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
